a <- available.packages()
a <- available.packages() head(rownames(a), 3)
head(rownames(a), 3)
install.packages("KernSmooth")
library(KernSmooth)
q()
install.packages("devtools")
install.packages("slidify")
library(devtools)
find_rtools()
q()
find.package("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
x <- 1
print(x)
x
msg <- "hello"
x <- 5
x
print(x)
x <- 4L
class(x)
x <- c(4, "a", TRUE)
class(c)
q()
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
y <- 2:3
x+y
class(x+y)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
class(x,y)
q()
x <- 1:4
y <- 2:3
x+y
class(x+y)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
q()
q()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if (x > 5) {
x<- 0
}
f <- function(x) {
g <- function(y) {
y+z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
q()
add2 <- function(x,y) {
x + y
}
add2(3,5)
dummy <- list(brad, 1 2 3, 4:7, uhf)
dummy <- list("brad", 1 3 4, 1:5)
dummy <- list("brad", "dude")
dummy
dummy2 <- list(1:5, 3 4 1, rep(6,2))
dummy2 <- list(3 4 1, rep(6,2))
dummy2 <- list(1:3, 2:4)
dummy2
str(tapply)
str(apply)
str(rnorm)
str(runif)
str(mapply)
q()
mean(x)
mean(nul)
traceback()
library(datasets)
data(iris)
?iris
head(iris)
mean(iris$sepal.length)
apply(iris,2,mean)
apply(iris[, 1:4],2,mean)
virg <- iris[species == "virginica"]
class(iris)
ncols(iris)
dim(iris)
nrow(iris)
names(iris)
q2 <- apply(iris[, 1:4],2,mean)
class(q2)
dim(q2)
dim(iris)
virg <- iris[iris$species == "virginica"]
dim(virg)
iris
virg <-iris[101:150]
colmeans(iris[101:150,1:4]
)
virg <- iris[101:150,1:4]
virg
names(virg)
dim(virg) <- c(50,4)
tail(iris)
class(virg)
mean(virg$Petal.width)
mean(as.numeric(verg$Sepal.Length))
mean(as.numeric(verg$Sepal.Length))
mean(as.numeric(virg$Sepal.Length))
library(datasets)
data(mtcars)
?mtcars
dim(mtcars)
names(mtcars)
debug(ls)
ls(puke)
n
n
n
n
n
n
n
n
n
n
head(gtmats)
head(mtcars)
mean(mtcars$mpg, mtcars$cyl) 
split(mtcars, mtcars$cyl) 
tapply(mtcars$mpg, mtcars$cyl, mean) YES
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
result <- tapply(mtcars$hp, mtcars$cyl, mean)
result
class(result)
dim(result)
ncol(result)
q()
q()
q()
mnnnnn
n
n
n
n
n
?solve
c=rbind(c(1, -1/4), c(-1/4, 1))
c
I2x2 <- rbind(c(1, 0), (0, 1))
I2x2 = rbind(c(1,0),(0,1))
Itwo <- rbind(c(1, 0), c(0,1))
itwo
Itwo
cinv <- solve(c,Itwo)
cinv
check <- c %*% cinv
check
c2 <- solve(c)%*%c
c2
solve(c)
q()
getwd()
setwd("C:\Users\fetter\ProgrammingAssignment2")
getwd()
c=rbind(c(1, -1/4), c(-1/4, 1))
c
solve(c)
i <- solve(c) %*% c
i
c3 <- rbind(c(1,0.25,0.4), c(0.10, -0.5, -0.5), c(-0.333,-0.333,0.333))
c3
solve(c3)
source("cachematrix.R")
makecachematrix
z <- makecachematrix(c)
makeCacheMatrix
z <- makeCacheMatrix(c)
setinverse
setInverse
cachedInverse
cacheSolve(c)
source("assign2example.R")
dummy <- c(1 3 5)
dummy <- c(1, 3, 5)
dummy
class(dummy)
makeVector(dummy)
cachemean(dummy)
m
mnul <- NULL
mnul
class(mnul)
nmat <- matrix(NULL)
 mv <- makeVector(dummy)
mv
class(mv)
cachemean(mv)
cachedInverse<- NULL
makeCacheMatrix(c)
mcmc <- makeCacheMatrix(c)
mcmc
inverse
cachedInverse
dim(cachedInverse)
class(cachedInverse)
cs_c <- cacheSolve(mcmc)
cs_c
mcmc3 <- makeCacheMatrix(c3)
mcmc3
cachedInverse
cacheSolve(mcmc)
cacheSolve(mcmc3)
cachedInverse
cacheSolve(mcmc3)
cachedInverse
cacheSolve(mcmc)
mcz <- makeCacheMatrix(NULL)
mcz
cacheSolve(mcz)
solve(rbind(c(1, 2), c(-1, -1))
)
c2 <- rbind(c(1, 2), c(-1, -1))
c2
cacheSolve(c2)
mcmc2 <- makeCacheMatrix(c2)
mcmc2
cachedInverse
cacheSolve(c2)
cacheSolve(mcmc2)
cacheSolve(mcmc2)
mcmc2
class(mcmc2)
list[3]
mcmc2[3]
mcmc2
mcmc2$set
print("Skipped")
source("cachematrix.R")
cout <- makeCacheMatrix(c)
cout
cacheSolve(cout)
cacheSolve(cout)
cacheSolve(makeCacheMatrix(c3))
cacheSolve(makeCacheMatrix(c3))
cs1 <- cacheSolve(cout)
cs1
c
c %*% cs1
q()
